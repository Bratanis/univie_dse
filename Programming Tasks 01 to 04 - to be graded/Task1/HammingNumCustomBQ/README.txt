For my custom BlockingQueue I have attempted to create a custom PriorityBlockingQueue that wraps a PriorityQueue to store the hamming numbers. My class implements the BlockingQueue interface and therefore supports conccurrency. It has a parameter "private final int minCapacityBeforeRemoving", which lets the Object creator specify how many numbers they want in the queue before any element can be removed. This is used in the InMerge class, where the class waits for at least 3 elements (one from each input queue multBy2inputQueue, multBy3inputQueuem multBy5inputQueue) before proceeding.
I have also created a class NoDuplicateNumbersPriorityBlockingQueue, which ensures that no duplicate elements are present.
The result of using my custom BlockingQueue(s) is that the numbers no longer appear strictly in ascending order, but rather every 3 elements (starting after the 1) are in ascending order but the trios themselves aren't sorted that way.
Since I could not come up with a creative use case for the custom BlockingQueue, I have attempted the functionality proposed in the task description.
